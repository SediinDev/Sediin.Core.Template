@model Sediin.Core.WebUi.Models.RegisterViewModel
@using Sediin.Core.Mvc.Helpers.TagHelpers
@addTagHelper *, Sediin.Core.Mvc.Helpers

<ajax-form asp-action="Register"
           asp-controller="Authentication"
           on-begin="alertWaid()"
           on-success="onRegisterSuccess"
           on-failure="handleError">

    <div class="form-horizontal row mt-4">
        <div class="col-md-6 form-group">
            @Html.LabelFor(m => m.UserName)
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(m => m.Ruolo)

            @* Costruzione opzioni enum direttamente inline *@
            <select-custom asp-for="Ruolo"
                    class="form-control"
                    placeholder="[Seleziona un'opzione]"
                    asp-items="Enum.GetValues(typeof(Sediin.Core.Identity.Roles))
                                    .Cast<Sediin.Core.Identity.Roles>()
                                    .Select(r => new SelectOptionCustom {
                                        Value = r.ToString(),
                                        Text = r.ToString() })
                                    .ToList()"></select-custom>

            @Html.ValidationMessageFor(m => m.Ruolo, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(m => m.Nome)
            @Html.TextBoxFor(m => m.Nome, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Nome, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(m => m.Cognome)
            @Html.TextBoxFor(m => m.Cognome, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Cognome, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(m => m.Email)
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(m => m.ConfirmEmail)
            @Html.TextBoxFor(m => m.ConfirmEmail, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ConfirmEmail, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="modal-footer">
        <button type="submit" class="btn btn-info">Registrati</button>
        <button type="button" class="btn btn-danger" data-dismiss="modal" onclick="hideModal()">Chiudi la finestra</button>
    </div>

</ajax-form>

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}

<script>
    function onRegisterSuccess(data) {
        if (data.success) {
            hideModal();
            alertSuccess(data.message);
        }
    }
</script>
