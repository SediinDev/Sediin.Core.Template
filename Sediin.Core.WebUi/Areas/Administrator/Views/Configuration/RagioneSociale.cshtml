@model Sediin.Core.TemplateConfiguration.Models.RagioneSociale
@using Sediin.Core.Mvc.Helpers.TagHelpers
@addTagHelper *, Sediin.Core.Mvc.Helpers
<style>
   

</style>
<ricerca-modulo header-text="Ragione Sociale"></ricerca-modulo>

<ajax-form asp-action="RagioneSociale"
           asp-controller="Configuration"
           on-begin="alertWaid()"
           on-success="toastSuccess(data); alertClose();"
           on-failure="handleError">

    <div class="form-horizontal row mt-4">

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Nome)
            @Html.TextBoxFor(model => model.Nome)
            @Html.ValidationMessageFor(model => model.Nome)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.NomeBreve)
            @Html.TextBoxFor(model => model.NomeBreve)
            @Html.ValidationMessageFor(model => model.NomeBreve)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Regione)
            @Html.TextBoxFor(model => model.Regione)
            @Html.ValidationMessageFor(model => model.Regione)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Provincia)
            @Html.TextBoxFor(model => model.Provincia)
            @Html.ValidationMessageFor(model => model.Provincia)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Indirizzo)
            @Html.TextBoxFor(model => model.Indirizzo)
            @Html.ValidationMessageFor(model => model.Indirizzo)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Citta)
            @Html.TextBoxFor(model => model.Citta)
            @Html.ValidationMessageFor(model => model.Citta)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Cap)
            @Html.TextBoxFor(model => model.Cap)
            @Html.ValidationMessageFor(model => model.Cap)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Telefono)
            @Html.TextBoxFor(model => model.Telefono)
            @Html.ValidationMessageFor(model => model.Telefono)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Fax)
            @Html.TextBoxFor(model => model.Fax)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Email)
            @Html.TextBoxFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.Pec)
            @Html.TextBoxFor(model => model.Pec)
            @Html.ValidationMessageFor(model => model.Pec)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.CodiceFiscale)
            @Html.TextBoxFor(model => model.CodiceFiscale)
            @Html.ValidationMessageFor(model => model.CodiceFiscale)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.PartitaIva)
            @Html.TextBoxFor(model => model.PartitaIva)
            @Html.ValidationMessageFor(model => model.PartitaIva)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.SitoWeb)
            @Html.TextBoxFor(model => model.SitoWeb)
            @Html.ValidationMessageFor(model => model.SitoWeb)
        </div>

        <div class="col-md-6 form-group">
            @Html.LabelFor(model => model.UriPortale)
            @Html.TextBoxFor(model => model.UriPortale)
            @Html.ValidationMessageFor(model => model.UriPortale)
        </div>


        <div class="col-md-6">
            @Html.Label("Logo")

            @* <div class="custom-file">
                <input type="file"  id="fileUpload" accept=".pdf">
                <label class="custom-file-label" for="fileUpload">Seleziona file</label>
            </div> *@

            <div class="custom-file">
                <input type="file"
                    class="custom-file-input"
                       id="Logo"
                       name="Logo"
                       accept=".png,.jpg,.jpeg"
                       onchange="handleFileChange(this, 'LogoBase64', 'imagelogo', 'LogoBase64-error')" />

                <label class="custom-file-label" for="customFile">Scegli file</label>
                <label class="badge bg-info">Formati: PNG, JPG, JPEG (max 2MB)</label>

                @Html.TextBoxFor(model => model.LogoBase64, new { id = "LogoBase64" })
                @Html.ValidationMessageFor(model => model.LogoBase64)
@*                 <span class="text-danger field-validation-error" id="LogoError" data-valmsg-for="LogoBase64"></span>
 *@
            </div>

            <img id="imagelogo"
                 class="img-fluid rounded col-md-6 mt-4"
                 style="margin-bottom: 10px; mix-blend-mode: multiply; display: @(string.IsNullOrEmpty(Model.LogoBase64) ? "none" : "block");"
                 src="@Model.LogoBase64" />
        </div>

    </div>

    <hr />

    <div class="text-center" style="margin-top:40px">
        <button type="submit" class="btn btn-info w-25">Aggiorna</button>
        <button type="reset" class="btn btn-danger w-25">Reimposta</button>
    </div>

</ajax-form>


@section Scripts {

    <script>
        function handleFileChange(input, hiddenInputId, imagePreviewId, errorSpanId) {
            const allowedExtensions = [".png", ".jpg", ".jpeg"];
            const maxSizeMB = 2;

            const file = input.files[0];
            const errorSpan = document.getElementById(errorSpanId);
            errorSpan.textContent = "";
            errorSpan.style.display = "none";

            if (!file) {
                document.getElementById(imagePreviewId).style.display = "none";
                document.getElementById(hiddenInputId).value = "";
                return;
            }

            const typeResult = validateFileType(file, allowedExtensions);
            if (!typeResult.valid) {
                errorSpan.textContent = typeResult.message;
                errorSpan.style.display = "block";
                input.value = "";
                document.getElementById(imagePreviewId).style.display = "none";
                document.getElementById(hiddenInputId).value = "";
                return;
            }

            const sizeResult = validateFileSize(file, maxSizeMB);
            if (!sizeResult.valid) {
                errorSpan.textContent = sizeResult.message;
                errorSpan.style.display = "block";
                input.value = "";
                document.getElementById(imagePreviewId).style.display = "none";
                document.getElementById(hiddenInputId).value = "";
                return;
            }

            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById(hiddenInputId).value = e.target.result;

                const img = document.getElementById(imagePreviewId);
                if (file.type.startsWith("image/")) {
                    img.src = e.target.result;
                    img.style.display = "block";
                } else {
                    img.style.display = "none";
                }
            };
            reader.readAsDataURL(file);
        }
    </script>
}
